
add_custom_target(jrlqp_benchmarks)

macro(addBenchmark name)
  add_executable(${name} ${name}.cpp ${ARGN})
  add_custom_command(TARGET jrlqp_benchmarks
    COMMAND ${name}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Running ${name} benchmark"
    )
  target_link_libraries(${name} PUBLIC JRLQP benchmark)
  if(NOT WIN32)
    target_link_libraries(${name} PUBLIC pthread)
  else()
    target_link_libraries(${name} PUBLIC shlwapi)
  endif()
  # Adding a project configuration file (for MSVC only)
  GENERATE_MSVC_DOT_USER_FILE(${name} "${CMAKE_INSTALL_PREFIX}/bin")
endmacro()

macro(addEigenBenchmark name)
  set(benchName ${name}_Bench)
  add_executable(${benchName} ${name}.cpp ${ARGN})
  add_custom_command(TARGET jrlqp_benchmarks
    COMMAND ${benchName} --benchmark_out="${CMAKE_CURRENT_SOURCE_DIR}/out/${name}.csv" --benchmark_out_format=csv
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Running ${name} benchmark"
    )
  target_link_libraries(${benchName} PUBLIC Eigen3::Eigen benchmark)
  if(NOT WIN32)
    target_link_libraries(${benchName} PUBLIC pthread)
  else()
    target_link_libraries(${benchName} PUBLIC shlwapi)
  endif()
  # Adding a project configuration file (for MSVC only)
  GENERATE_MSVC_DOT_USER_FILE(${benchName} "${CMAKE_INSTALL_PREFIX}/bin")
endmacro()

file(MAKE_DIRECTORY out)

addEigenBenchmark(BasicEigen)
addEigenBenchmark(Decomposition)
addEigenBenchmark(LinearSystemSolving)

add_custom_command(TARGET jrlqp_benchmarks
    COMMAND python "${CMAKE_CURRENT_SOURCE_DIR}/generatePlot.py"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
